<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Tutorials on BaconGameDev's Blog</title><link>http://localhost:1313/plugin/</link><description>Recent content in Tutorials on BaconGameDev's Blog</description><generator>Hugo -- 0.145.0</generator><language>en</language><lastBuildDate>Wed, 30 Apr 2025 16:58:27 +0700</lastBuildDate><atom:link href="http://localhost:1313/plugin/index.xml" rel="self" type="application/rss+xml"/><item><title>Documentation</title><link>http://localhost:1313/plugin/combo-graph/documentation/</link><pubDate>Wed, 30 Apr 2025 16:58:27 +0700</pubDate><guid>http://localhost:1313/plugin/combo-graph/documentation/</guid><description>&lt;h1 id="node-types">Node Types&lt;/h1>
&lt;hr>
&lt;h2 id="root-node">Root Node&lt;/h2>
&lt;p>Root node is the starting point of the graph. When the graph resets, it returns to this node.&lt;/p>
&lt;hr>
&lt;h2 id="execution-node">Execution Node&lt;/h2>
&lt;p>Used to perform actions, such as playing animations, consuming mana, or triggering gameplay effects.&lt;/p>
&lt;ul>
&lt;li>Each Execution Node can contain multiple Action Passes.&lt;/li>
&lt;li>Passes are executed from top to bottom.&lt;/li>
&lt;li>If any pass fails, execution stops and follows the &lt;code>Fail&lt;/code> output pin.&lt;/li>
&lt;/ul>
&lt;h3 id="creating-a-custom-action-pass">Creating a Custom Action Pass&lt;/h3>
&lt;p>Create a custom Action Pass by inheriting from &lt;code>UComboActionPass&lt;/code>.&lt;/p></description></item><item><title>Quick Start</title><link>http://localhost:1313/plugin/combo-graph/quick-start/</link><pubDate>Wed, 30 Apr 2025 14:21:27 +0700</pubDate><guid>http://localhost:1313/plugin/combo-graph/quick-start/</guid><description>&lt;h2 id="1-prepare-your-acharacter">1. Prepare your ACharacter&lt;/h2>
&lt;p>Make sure your Character blueprint or C++ has these components added:&lt;/p>
&lt;ul>
&lt;li>&lt;code>AnimationDrivenComponent&lt;/code> – For listening to animation montage data and signaling it to other systems (e.g., gameplay abilities)&lt;/li>
&lt;li>&lt;code>ComboManagerComponent&lt;/code> – For managing the combo graph&lt;/li>
&lt;/ul>
&lt;span style="
background-color: #FFD700;
padding: 2px 4px;
margin: 1px;
border-radius: 2px;
font-size: 95%;
">
&lt;span style="
color: black;
font-weight: bold;
">
GAS Users
&lt;/span>
&lt;/span>
&lt;p>Make sure your Character has &lt;code>AbilitySystemComponent&lt;/code> and is derived from &lt;code>UContextAbilitySystemComponent&lt;/code>.&lt;br>
See &lt;code>ComboBasicCharacter.h&lt;/code> for a default implementation.&lt;/p></description></item><item><title>Bacon Combo Graph</title><link>http://localhost:1313/plugin/combo-graph/overview/</link><pubDate>Thu, 24 Apr 2025 14:07:27 +0700</pubDate><guid>http://localhost:1313/plugin/combo-graph/overview/</guid><description>Bacon Combo Graph is an Unreal Engine plugin (UE5.3+) designed to help you build complex, animation-driven combat systems fast and easy</description></item></channel></rss>