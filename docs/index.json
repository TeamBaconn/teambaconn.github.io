[{"content":"Placeholder for combo graph tutorial. Will be updated soon\n","permalink":"https://teambaconn.github.io/tutorial/combo-graph/","summary":"\u003cp\u003ePlaceholder for combo graph tutorial. Will be updated soon\u003c/p\u003e","title":"Bacon Combo Graph"},{"content":"This post gathers some of the most useful resources I‚Äôve come across ‚Äî from general Unreal knowledge and multiplayer guides to the Gameplay Ability System (GAS) and advanced debugging techniques. Whether you‚Äôre a beginner or deep into production, these links can save you hours of searching.\nüí° Unreal General Knowledge Deep Unreal C++ topics with code demos: YouTube ‚Äî enigma_dev Unreal Notes (information is not fully documented but often golden if you dig deep): ikrima.dev UE4 Guide Unreal Knowledge Base (mostly in Chinese, includes interesting topics about UnLua framework): UE5 Wiki Understanding Unreal Engine cycles and loops: YouTube ‚Äî Unreal Engine Cycles/Loops Smart pointers: Epic - All about Soft and Weak pointers Modules: Epic - Unreal Engine\u0026rsquo;s C++ Modules üåê Multiplayer Knowledge A great starting point for multiplayer basics: Multiplayer Starter Knowledge General multiplayer tips and tricks (must read): Wizardcell Multiplayer Tips üó°Ô∏è Gameplay Ability System (GAS) The ultimate GAS knowledge base: GAS Documentation by tranek Full setup example project: Narxim-GAS-Example üêû Debugging Advanced multi-purpose debugging plugin (works well with GAS): Cog Debugging Plugin Advanced debugging techniques using an IDE: Epic Games Advanced Debugging Tutorial üß∞ Debugging Tip: Paste the following lines into Rider‚Äôs variable watcher (exclude the comments) for quick insights during breakpoints:\n// Check if the breakpoint is on the client or server {,,UnrealEditor-Engine.dll}::GPlayInEditorContextString // Display the current frame count {,,UnrealEditor-Core.dll}::GFrameCounter // View the current game configuration {,,UnrealEditor-Core.dll}::GConfig ","permalink":"https://teambaconn.github.io/unreal-post/external-resources/","summary":"A collection of valuable resources for Unreal Engine developers, covering general knowledge, multiplayer, GAS, and advanced debugging tools","title":"[Unreal] External Knowledge"},{"content":"What is animation driven? Animation driven is a term usually refers to systems or mechanics where some aspects in a system are controlled directly by animations‚Äîrather than calculated through physics or pure code logic.\nAnimations essentially authorize the system to perform certain actions in-game such as moving, dealing damage, spawning hitboxes, performing grab attacks, picking up items\u0026hellip;\nIf the animation gets interrupted, most of those events simply won‚Äôt trigger. I say most because sometimes, for balance reasons, a game might choose to ignore the interruption and still execute the event anyway.\nThe difference between animation-driven and logic-driven systems It all comes down to one question: Who's making the decision?\nLet‚Äôs take a simple AOE skill as an example and compare two different implementations:\nLogic-driven system:\n‚ÄúThe system plays the animation and drives the logic itself.‚Äù\nIn this setup, the skill system plays the animation, then waits for 0.4s before telling the damage system to apply AOE damage.\nAnimation-driven system:\n‚ÄúThe animation feeds data into the system and trigger the logics‚Äù\nHere, the skill system still plays the animation, but instead creating a timer to wait for 0.4s, it waits for the animation to notify the system when to apply damage, and how large / powerful the AOE should be. Usually for static data that doesn\u0026rsquo;t need to change in runtime (dynamic), it can be stored in the animation data for beter and centralized visualization (see the image below).\nWhen should you use an animation-driven system? TL;DR: If you\u0026rsquo;re making a Souls-like game just use it.\nYou should consider using animation-driven systems when:\nYou\u0026rsquo;re aiming for realistic gameplay where animation and logic need to be tightly synced Your animations vary in speed and that variation affects timing of gameplay events You want game designers to balance and tweak things visually, without the longgg config \u0026amp; test loop Honestly, creating new content in an animation-driven system is often much easier. You can see exactly what\u0026rsquo;s happening, and tweaking animations gives you immediate feedback on how the gameplay feels.\nEven better, moving some logic into animation assets lets game designers create and test content quickly, without needing a programmer to step in. That means faster iteration and more time for devs to focus on deeper systems or fixing that one annoying bug that only happens on Friday üòÖ.\nAnimation-Driven System in Unreal Implementation The image above is an example of how I think an animation-driven system should be implemented for Gameplay Ability System in Unreal.\nFor other systems, you can use the same approach, it just in different by names.\nI\u0026rsquo;ve annotated the steps in the image, from start (ActivateAbility) to end (EndAbility). Here\u0026rsquo;s a breakdown:\nThe ability gets activated and plays a montage.\nUse the PlayMontageAndWait ability task from GAS as it already has built-in delegates and handles replication for multiplayer. The ability waits for one of the relevant montage events (OnCompleted, OnInterrupted, OnBlendOut) to end or cancel the ability. While the montage plays, any animation notify it hits will send data to a custom component called AnimationDrivenProxyComponent.\nThat component then broadcasts the OnDataReceiveDelegate delegate. The ability task binds to OnDataReceiveDelegate delegate in the AnimationDrivenProxyComponent to listen for notify data.\nMake sure it only listens to relevant data‚Äîsince multiple montages might be playing at once.\nFor example: if your animation-driven ability plays Montage A, then the task should only react to notify data coming from Montage A. Once the ability task receives the notify data, it drives the logic of the ability accordingly. Notes Animation Notifies and Notify States are STATELESS as they\u0026rsquo;re shared across animation instances, so only use them for static data.\nIf you need to listen to NotifyState tick functions, don‚Äôt flood AnimationDrivenProxyComponent with updates.\nInstead, only send NotifyBegin and NotifyEnd‚Äîlet the ability task handle ticking if needed. It‚Äôs more efficient that way.\nOn dedicated servers (not listen servers), skeletal meshes don\u0026rsquo;t tick, meaning no animation plays on the server-side.\nThus, if you‚Äôre spawning a hitbox on a moving socket (like a sword swing), it might just float there on the server.\nTo fix this, you‚Äôll need to force the mesh to tick pose during montage playback. Add this in your ACharacter constructor or BeginPlay:\n#ifdef WITH_SERVER_CODE GetMesh()-\u0026gt;VisibilityBasedAnimTickOption = EVisibilityBasedAnimTickOption::OnlyTickMontagesAndRefreshBonesWhenPlayingMontages; #else // Default client setting GetMesh()-\u0026gt;VisibilityBasedAnimTickOption = EVisibilityBasedAnimTickOption::OnlyTickPoseWhenRendered; #endif A notify placed at the very beginning of the animation is not guaranteed to fire immediately. If you do something like: Play Animation A ‚Üí Expect Notify to fire ‚Üí Check for that event in the same frame ‚Ä¶it might fail, because the notify may not trigger until the next animation tick. Solution: If the logic must happen right after playing the animation, don‚Äôt rely on the notify. Trigger it manually after playing the animation, or delay your logic by 1 frame. The notify that you put in the end will NOT be guaranteed to hit, since the animation could be interupted or blend out too early. Only Notify State will hit end if your animation finishes early (only if the NotifyBegin has already triggered). ","permalink":"https://teambaconn.github.io/unreal-post/animation-driven/","summary":"A general overview of animation-driven systems in game development, along with practical tips and implementation strategies for building them using GAS.","title":"[Unreal] Animation Driven System"},{"content":"‚ö†Ô∏è Prerequisites These tips apply to Unreal Engine 5 and later. If you\u0026rsquo;re working with an older version, the behavior might be different. Feel free to reach out if any of my information is incorrect or misleading. I only mention tips that I believe are not well-documented online. Replicated Tags 1. AddReplicatedLooseGameplayTag (or remove) does not modify tags on the caller side For example, if you add replicated tags on the server, only the clients will receive them (through MinimalReplicationTags replication), but the tag will NOT be added on the server itself.\nIf you want to add or remove the tag on the server and also replicate it to clients, use:\nUAbilitySystemBlueprintLibrary::AddLooseGameplayTag UAbilitySystemBlueprintLibrary::RemoveLooseGameplayTag 2. Do NOT use AddLooseGameplayTag or RemoveLooseGameplayTag on replicated tags to modify them locally (unless you\u0026rsquo;re the authoritative server) Adding or removing a loose gameplay tag on the client will eventually be overridden by the replicated version from the server.\nExample: You add Tag.Example locally on the client five times. On the server, you call AddReplicatedLooseGameplayTag with Tag.Example once. The client‚Äôs tag count gets overridden when the server replicates MinimalReplicationTags. The server does not care how many times the client added the tag locally; only the replicated state matters. Replication Stage Client State Server State Before Replication 5 1 Expected After Replication 6 1 Actual After Replication 1 (Overridden) 1 Workaround: To make the server respect locally added tags, you can create a new tag: Tag.Example.Replicated.\nUse this tag for replication (AddReplicatedLooseGameplayTag, ability tags, etc.). Use Tag.Example for locally added tags. This separation prevents the server from overriding local tags. Specify Tag Prefixes for Blueprint Users In most projects, there are many tags, but certain systems only need to handle a specific group of them. For example, input tags only need to consider tags beginning with ComboGraph.Input.\nBy enforcing tag prefixes, you:\nReduce the risk of selecting the wrong tag. Keep tags organized and readable. Restricting Tags in Blueprints You can enforce tag prefixes by using arbitrary prefixes in different data structures such as FGameplayTag, TArray, and TMap. However, this restriction only works in Blueprints‚ÄîC++ does not enforce it.\nExample Usage: // Restrict TArray tags using Categories UPROPERTY(EditAnywhere, meta = (Categories = \u0026#34;General.Input\u0026#34;)) TArray\u0026lt;FGameplayTag\u0026gt; InputTags; // Restrict TMap tags using GameplayTagFilter UPROPERTY(EditAnywhere, meta = (GameplayTagFilter = \u0026#34;General.SetByCaller\u0026#34;)) TMap\u0026lt;FGameplayTag, float\u0026gt; SetByCallerMagnitudes; // Restrict function parameters (must not be a reference parameter) UFUNCTION(BlueprintCallable, Meta = (GameplayTagFilter = \u0026#34;General.Input\u0026#34;)) void ExampleFunc(FGameplayTag Input); By using these metadata settings, you can improve organization and enforce structured tag usage in your Blueprint systems.\nSerialize TMap\u0026lt;FGameplayTag, float\u0026gt; or any TMap for replication By default TMap is not supported for sending through network. In my game, I have the need to send the TMap\u0026lt;FGameplayTag, float\u0026gt; Params to the clients so I have to do my own serialization. This is the same way GAS use to replicate tag counts.\nUSTRUCT(Blueprintable) struct FReplicatedMapWrapper { GENERATED_USTRUCT_BODY() virtual bool NetSerialize(FArchive\u0026amp; Ar, class UPackageMap* Map, bool\u0026amp; bOutSuccess) override; public: UPROPERTY(BlueprintReadWrite) TMap\u0026lt;FGameplayTag, float\u0026gt; Params; }; template\u0026lt;\u0026gt; struct TStructOpsTypeTraits\u0026lt;FReplicatedMapWrapper\u0026gt; : public TStructOpsTypeTraitsBase2\u0026lt;FReplicatedMapWrapper\u0026gt; { enum { WithNetSerializer = true, }; }; bool FReplicatedMapWrapper::NetSerialize(FArchive\u0026amp; Ar, class UPackageMap* Map, bool\u0026amp; bOutSuccess) { constexpr int32 CountBits = MAX_ELEMENT_COUNT; constexpr int32 MaxCount = ((1 \u0026lt;\u0026lt; CountBits) - 1); if (Ar.IsSaving()) { int32 Count = Params.Num(); if (Count \u0026gt; MaxCount) { UE_LOG(LogTemp, Error, TEXT(\u0026#34;FReplicatedMapWrapper::NetSerialize: Too many params (%d) for replication. Clamping to %d.\u0026#34;), Count, MaxCount); Count = MaxCount; } Ar.SerializeBits(\u0026amp;Count, CountBits); for (auto\u0026amp; It : Params) { FGameplayTag Tag = It.Key; float Value = It.Value; Tag.NetSerialize(Ar, Map, bOutSuccess); Ar \u0026lt;\u0026lt; Value; if (--Count \u0026lt;= 0) { break; } } } else { int32 Count = 0; Ar.SerializeBits(\u0026amp;Count, CountBits); Params.Empty(); while (Count-- \u0026gt; 0) { FGameplayTag Tag; float Value = 0.f; Tag.NetSerialize(Ar, Map, bOutSuccess); Ar \u0026lt;\u0026lt; Value; Params.Add(Tag, Value); } } return true; } I hope these insights help you avoid common pitfalls and improve your workflow! If you have any questions or additional tips, feel free to reach out. üöÄ\n","permalink":"https://teambaconn.github.io/unreal-post/gameplay-tag/","summary":"Gotcha tips you might not know when using Gameplay Tags with GAS","title":"[Unreal] Using Gameplay Tags with GAS"},{"content":"About Me My name is Nguyen Lam Tuong (Bacon) I am based in Ho Chi Minh City, Vietnam I have a bachelor\u0026rsquo;s degree in Computer Science from HCM University of Science Check out my üü¶ LinkedIn for the latest updates on my professional profile. Technical Skills Game AI, Gameplay Programming, Tool / Editor Programming Multiplayer Programming Unreal Engine, Unity C++, C#, Lua, Java, Javascript 3D Math, Linear Algebra Web \u0026amp; App Fullstack Development Published Games Sipher Odyssey - Cross Platform\rFramework: Unreal Engine\nResponsibility: Game Engineer\nWebsite: Sipher Odyssey\nDemon Hunter - Mobile\rFramework: BlockmanGO Engine\nResponsibility: Product Owner, Full-stack Developer\nPersonal / Gamejam Projects Most of my games are available on Itch.io\nYou can explore more games from my old portfolio\nCombat system - UE5 / PC\rFramework: Unreal Engine\nResponsibility: Solo Developer\nMagic Typer - Web / Mobile\rFramework: Unity\nResponsibility: Solo Developer\nFarm Fortune - Web\rFramework: Unity\nResponsibility: Solo Developer\nHellevator - Web / Mobile\rFramework: Unity\nResponsibility: Solo Developer\nChess Factorio - Web\rFramework: Unity\nResponsibility: Solo Developer\nNon-game projects Stylix - Mobile App\rStylix is a mobile app that allows users to virtually try on any clothes before purchase. We accurately analyze the body of users, allowing them to try on any clothes at any time and anywhere. By using state-of-the-art models, our technology can map 2D images of clothes onto the user\u0026rsquo;s body despite their unique shape in no time and at low cost.\nChannel: Youtube Project detail: Milanote FindMe - Web App\rFindMe provides a service that allows filtering of running athletes\u0026rsquo; images based on the athlete\u0026rsquo;s bib number (BIB) and face recognition. Runners can access the product\u0026rsquo;s website after the event finishes, upload their face image, or enter their BIB number to retrieve all of the photos containing their faces or bib in the race.\nProject detail: Milanote ","permalink":"https://teambaconn.github.io/posts/portfolio/","summary":"I am a game developer specializing in systems and gameplay programming in Unreal and Unity, focused on writing efficient, clean code and tackling new challenges in game development.","title":"Tuong Nguyen - Game Developer Portfolio"}]